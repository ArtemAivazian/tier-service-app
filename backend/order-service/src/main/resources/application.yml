server:
  port: ${PORT:0}

# EUREKA
eureka:
  client:
    service-url:
      defaultZone: http://test:test@localhost:8010/eureka
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

spring:
  config:
    import: optional:configserver:http://localhost:8012
  devtools:
    restart:
      enabled: true #automatically restart app after making changes
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  application:
    name: order-service
  datasource:
    url: jdbc:postgresql://localhost:5442/eshop
    username: "admin"
    password: "123"
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        format_sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  #KAFKA
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

gateway:
  ip: 10.0.56.5

token:
  secret: 9a2f8c4e6b0d71f3e8b925a45747f894a3d6bc70fa8d5e21a15a6d8c3b9a0e7c

authorization:
  token:
    header:
      name: Authorization
      prefix: Bearer

logging:
  level:
    org.springframework.security: TRACE
  file:
    name: /Users/artemayvazyan/Desktop/tierserviceapp/backend/order-service/order-service.log

management:
  endpoints:
    web:
      exposure:
        include: beans,health,mappings,httpexchanges